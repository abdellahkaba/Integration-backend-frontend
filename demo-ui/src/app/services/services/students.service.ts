/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addStudent } from '../fn/students/add-student';
import { AddStudent$Params } from '../fn/students/add-student';
import { deleteStudent } from '../fn/students/delete-student';
import { DeleteStudent$Params } from '../fn/students/delete-student';
import { findStudentById } from '../fn/students/find-student-by-id';
import { FindStudentById$Params } from '../fn/students/find-student-by-id';
import { listAllStudent } from '../fn/students/list-all-student';
import { ListAllStudent$Params } from '../fn/students/list-all-student';
import { StudentResponse } from '../models/student-response';
import { updateStudent } from '../fn/students/update-student';
import { UpdateStudent$Params } from '../fn/students/update-student';

@Injectable({ providedIn: 'root' })
export class StudentsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `findStudentById()` */
  static readonly FindStudentByIdPath = '/students/{student-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findStudentById()` instead.
   *
   * This method doesn't expect any request body.
   */
  findStudentById$Response(params: FindStudentById$Params, context?: HttpContext): Observable<StrictHttpResponse<StudentResponse>> {
    return findStudentById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findStudentById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findStudentById(params: FindStudentById$Params, context?: HttpContext): Observable<StudentResponse> {
    return this.findStudentById$Response(params, context).pipe(
      map((r: StrictHttpResponse<StudentResponse>): StudentResponse => r.body)
    );
  }

  /** Path part for operation `updateStudent()` */
  static readonly UpdateStudentPath = '/students/{student-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateStudent()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateStudent$Response(params: UpdateStudent$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return updateStudent(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateStudent$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateStudent(params: UpdateStudent$Params, context?: HttpContext): Observable<void> {
    return this.updateStudent$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `deleteStudent()` */
  static readonly DeleteStudentPath = '/students/{student-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteStudent()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteStudent$Response(params: DeleteStudent$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteStudent(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteStudent$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteStudent(params: DeleteStudent$Params, context?: HttpContext): Observable<void> {
    return this.deleteStudent$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `listAllStudent()` */
  static readonly ListAllStudentPath = '/students';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `listAllStudent()` instead.
   *
   * This method doesn't expect any request body.
   */
  listAllStudent$Response(params?: ListAllStudent$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<StudentResponse>>> {
    return listAllStudent(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `listAllStudent$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  listAllStudent(params?: ListAllStudent$Params, context?: HttpContext): Observable<Array<StudentResponse>> {
    return this.listAllStudent$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<StudentResponse>>): Array<StudentResponse> => r.body)
    );
  }

  /** Path part for operation `addStudent()` */
  static readonly AddStudentPath = '/students';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addStudent()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addStudent$Response(params: AddStudent$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return addStudent(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addStudent$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addStudent(params: AddStudent$Params, context?: HttpContext): Observable<number> {
    return this.addStudent$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

}
