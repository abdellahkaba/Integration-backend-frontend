/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { deleteDepartement } from '../fn/departements/delete-departement';
import { DeleteDepartement$Params } from '../fn/departements/delete-departement';
import { DepartementResponse } from '../models/departement-response';
import { findDepartementById } from '../fn/departements/find-departement-by-id';
import { FindDepartementById$Params } from '../fn/departements/find-departement-by-id';
import { listAllDepartement } from '../fn/departements/list-all-departement';
import { ListAllDepartement$Params } from '../fn/departements/list-all-departement';
import { saveDepartement } from '../fn/departements/save-departement';
import { SaveDepartement$Params } from '../fn/departements/save-departement';
import { updateDepartement } from '../fn/departements/update-departement';
import { UpdateDepartement$Params } from '../fn/departements/update-departement';

@Injectable({ providedIn: 'root' })
export class DepartementsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `findDepartementById()` */
  static readonly FindDepartementByIdPath = '/departements/{departement-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findDepartementById()` instead.
   *
   * This method doesn't expect any request body.
   */
  findDepartementById$Response(params: FindDepartementById$Params, context?: HttpContext): Observable<StrictHttpResponse<DepartementResponse>> {
    return findDepartementById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findDepartementById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findDepartementById(params: FindDepartementById$Params, context?: HttpContext): Observable<DepartementResponse> {
    return this.findDepartementById$Response(params, context).pipe(
      map((r: StrictHttpResponse<DepartementResponse>): DepartementResponse => r.body)
    );
  }

  /** Path part for operation `updateDepartement()` */
  static readonly UpdateDepartementPath = '/departements/{departement-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateDepartement()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateDepartement$Response(params: UpdateDepartement$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return updateDepartement(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateDepartement$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateDepartement(params: UpdateDepartement$Params, context?: HttpContext): Observable<void> {
    return this.updateDepartement$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `deleteDepartement()` */
  static readonly DeleteDepartementPath = '/departements/{departement-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteDepartement()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteDepartement$Response(params: DeleteDepartement$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteDepartement(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteDepartement$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteDepartement(params: DeleteDepartement$Params, context?: HttpContext): Observable<void> {
    return this.deleteDepartement$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `listAllDepartement()` */
  static readonly ListAllDepartementPath = '/departements';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `listAllDepartement()` instead.
   *
   * This method doesn't expect any request body.
   */
  listAllDepartement$Response(params?: ListAllDepartement$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<DepartementResponse>>> {
    return listAllDepartement(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `listAllDepartement$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  listAllDepartement(params?: ListAllDepartement$Params, context?: HttpContext): Observable<Array<DepartementResponse>> {
    return this.listAllDepartement$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<DepartementResponse>>): Array<DepartementResponse> => r.body)
    );
  }

  /** Path part for operation `saveDepartement()` */
  static readonly SaveDepartementPath = '/departements';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `saveDepartement()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveDepartement$Response(params: SaveDepartement$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return saveDepartement(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `saveDepartement$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveDepartement(params: SaveDepartement$Params, context?: HttpContext): Observable<number> {
    return this.saveDepartement$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

}
